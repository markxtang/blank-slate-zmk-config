/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define LFT_L 2
#define RHT_L 3
#define LNR_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

// Only turn off it the key is held for 5 seconds or longer.
&soft_off {
    hold-time-ms = <5000>; 
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout = &layout_ortho_4x12_all1u;
    };

    macros {
        mcr_deg: mcr_deg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N2 &kp KP_N4 &kp KP_N8>,
                <&macro_release &kp LALT>;
        };

        mcr_endash: mcr_endash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N0>,
                <&macro_release &kp LALT>;
        };

        mcr_emdash: mcr_emdash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N1>,
                <&macro_release &kp LALT>;
        };

        mcr_enspace: mcr_enspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N8 &kp KP_N1 &kp KP_N9 &kp KP_N4>,
                <&macro_release &kp LALT>;
        };

        mcr_emspace: mcr_emspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N8 &kp KP_N1 &kp KP_N9 &kp KP_N5>,
                <&macro_release &kp LALT>;
        };


    };
    
    tap_dances {
    	TABBIE: tab_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_TABBIE";
		#binding-cells = <0>;
		tapping-term-ms = <250>;
		bindings = <&kp TAB>, <&caps_word>;
	};

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LFT_L RHT_L>;
            then-layer = <LNR_L>;
        };
    };

    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp ESC		    &kp Q		    &kp W		    &kp E	    	&kp R	    	&kp T	    	&kp Y		    &kp U		    &kp I		    &kp O		    &kp P		    &kp BKSP
&TABBIE	    	&kp A	        &kp S	    	&kp D	    	&kp F	    	&kp G	    	&kp H		    &kp J		    &kp K		    &kp L		    &kp SEMI		&kp SQT
&kp LSHFT    	&kp Z		    &kp X	    	&kp C	    	&kp V		    &kp B	    	&kp N		    &kp M		    &kp COMMA	    &kp DOT		    &kp FSLH	    &kp RSHFT
&kp LCTRL   	&mo NAV_L       &kp LGUI    	&kp LALT    	&lt LFT_L SPACE &lt LFT_L SPACE &lt RHT_L SPACE &lt RHT_L SPACE &kp MINUS	    &kp PLUS	    &kp EQUAL		&kp RET
            >;
        };

        NAV_layer {
            label = "NAV";
            bindings = <
&soft_off     	&trans        	&kp F7        	&kp F8        	&kp F9        	&kp F10       	&kp F11       	&kp F12       	&trans        	&bootloader   	&trans        	&bt BT_CLR    
&trans        	&trans        	&kp F4        	&kp F5        	&kp F6        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        
&trans        	&trans        	&kp F1        	&kp F2        	&kp F3        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        
&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&bt BT(0)     	&bt BT(1)     	&bt BT(2)     	&bt BT(3)     
            >;
        };

        LFT_layer {
            label = "LFT";
            bindings = <
&kp GRAVE      	&trans        	&kp N7        	&kp N8        	&kp N9        	&trans        	&trans        	&trans        	&kp PG_UP      	&trans        	&trans        	&kp DEL       
&caps_word     	&trans        	&kp N4        	&kp N5        	&kp N6        	&trans        	&trans        	&kp HOME       	&kp PG_DN      	&kp END      	&trans          &trans        
&trans        	&trans        	&kp N1        	&kp N2        	&kp N3        	&trans        	&trans        	&trans        	&kp LBKT      	&kp RBKT      	&kp PIPE      	&trans        
&trans        	&trans        	&trans        	&kp N0        	&trans        	&trans        	&trans          &mcr_emspace   	&mcr_emdash    	&kp STAR       	&kp CARET      	&trans     
            >;
        };

        RHT_layer {
            label = "RHT";
            bindings = <
&kp TILDE      	&trans        	&kp AMPS      	&kp STAR      	&mcr_deg	    &trans        	&trans        	&trans        	&kp UP       	&trans        	&trans        	&kp DEL       
&trans       	&trans        	&kp DLLR      	&kp PRCNT     	&kp CARET       &trans        	&trans        	&kp LEFT       	&kp DOWN      	&kp RIGHT      	&trans          &trans        
&trans        	&trans        	&kp EXCL      	&kp AT        	&kp HASH        &trans        	&trans        	&trans        	&kp LPAR      	&kp RPAR      	&kp BSLH      	&trans    
&trans        	&trans        	&trans        	&trans        	&mcr_enspace    &trans        	&trans        	&trans        	&mcr_endash    	&kp C_MUTE    	&kp C_VOL_DN  	&kp C_VOL_UP     
            >;
        };

        LNR_layer {
            label = "LNR";
            bindings = <
&trans        	&trans      	&trans      	&trans  	    &trans        	&trans        	&trans        	&trans        	&trans        	&trans      	&trans      	&trans
&trans        	&trans      	&trans      	&trans  	    &trans        	&trans        	&trans        	&trans        	&trans        	&trans      	&trans      	&trans
&trans        	&trans      	&trans      	&trans  	    &trans        	&trans        	&trans        	&trans        	&kp LBRC      	&kp RBRC      	&trans      	&trans
&trans        	&trans        	&trans        	&trans          &trans        	&trans        	&trans        	&trans        	&trans        	&trans      	&trans      	&trans    
            >;
        };

    };
};