/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define LFT_L 2
#define RHT_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

// Only turn off it the key is held for 5 seconds or longer.
&soft_off {
    hold-time-ms = <5000>; 
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout = &layout_ortho_4x12_all1u;
    };

    macros {
        mcr_deg: mcr_deg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N2 &kp KP_N4 &kp KP_N8>,
                <&macro_release &kp LALT>;
        };

        mcr_endash: mcr_endash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N0>,
                <&macro_release &kp LALT>;
        };

        mcr_emdash: mcr_emdash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N1>,
                <&macro_release &kp LALT>;
        };

        mcr_enspace: mcr_enspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N8 &kp KP_N1 &kp KP_N9 &kp KP_N4>,
                <&macro_release &kp LALT>;
        };

        mcr_emspace: mcr_emspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LALT>,
                <&macro_tap &kp KP_N8 &kp KP_N1 &kp KP_N9 &kp KP_N5>,
                <&macro_release &kp LALT>;
        };

        hold_cas: hold_cas {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                /* On press: hold Ctrl, Alt, Shift */
                &macro_press   &kp LCTRL &kp LALT &kp LSHIFT
                /* On release: release Ctrl, Alt, Shift */
                &macro_release &kp LCTRL &kp LALT &kp LSHIFT
            >;
        };

        win_snip: win_snip {
            compatible    = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms       = <10>;   /* small delay before tapping */
            tap-ms        = <10>;   /* ensure host registers the tap */
            bindings = <
                /* on press: hold Windows + Shift */
                &macro_press   &kp LGUI &kp LSHIFT
                /* tap the “S” key */
                &macro_tap     &kp S
                /* on release: release Windows + Shift */
                &macro_release &kp LGUI &kp LSHIFT
            >;
        };

        ctrl_alt_del: ctrl_alt_del {
            compatible    = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms       = <10>;   /* small delay before tapping */
            tap-ms        = <10>;   /* ensure host registers the tap */
            bindings = <
                /* on press: hold Windows + Shift */
                &macro_press   &kp LCTRL &kp LALT 
                /* tap the “S” key */
                &macro_tap     &kp DEL
                /* on release: release Windows + Shift */
                &macro_release &kp LCTRL &kp LALT 
            >;
        };

    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
    };
    
    tap_dances {
    	TABBIE: tab_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_TABBIE";
		#binding-cells = <0>;
		tapping-term-ms = <250>;
		bindings = <&kp TAB>, <&caps_word>;
	};

    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp ESC		    &kp Q		    &kp W		    &kp E	    	&kp R	    	&kp T	    	&kp Y		    &kp U		    &kp I		    &kp O		    &kp P		    &bspc_del
&TABBIE	    	&kp A	        &kp S       	&kp D	    	&kp F	    	&kp G	    	&kp H		    &kp J		    &kp K		    &kp L		    &kp SEMI		&kp SQT
&kp LSHFT    	&kp Z		    &kp X	    	&kp C	    	&kp V		    &kp B	    	&kp N		    &kp M		    &kp COMMA	    &kp DOT		    &kp FSLH	    &kp RSHFT
&kp LCTRL   	&mo NAV_L       &kp LGUI    	&kp LALT    	&kp EQUAL       &lt LFT_L SPACE &lt RHT_L SPACE &kp MINUS       &mcr_endash     &mcr_emdash	    &kp BSLH		&kp RET
            >;
        };

        NAV_layer { 
            label = "NAV";
            bindings = <
&soft_off     	&trans        	&kp F7        	&kp F8        	&kp F9        	&kp F10       	&kp F11       	&kp F12       	&trans        	&bootloader   	&trans        	&bt BT_CLR    
&trans        	&trans        	&kp F4        	&kp F5        	&kp F6        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        
&trans        	&trans        	&kp F1        	&kp F2        	&kp F3        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        
&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&trans        	&bt BT(0)     	&bt BT(1)     	&bt BT(2)     	&bt BT(3)     
            >;
        };

        LFT_layer {
            label = "LFT";
            bindings = <
&kp GRAVE      	&trans        	&kp N7        	&kp N8        	&kp N9        	&trans        	&trans        	&trans        	&kp PG_UP      	&trans        	&trans        	&ctrl_alt_del       
&caps_word     	&trans        	&kp N4        	&kp N5        	&kp N6        	&trans        	&trans        	&kp HOME       	&kp PG_DN      	&kp END      	&trans          &trans        
&trans        	&trans        	&kp N1        	&kp N2        	&kp N3        	&trans        	&trans        	&trans        	&kp LBKT      	&kp RBKT      	&trans      	&trans        
&trans        	&trans        	&trans        	&kp N0        	&trans         	&trans        	&trans          &trans         	&mcr_enspace    &mcr_emspace    &trans      	&trans     
            >;
        };

        RHT_layer {
            label = "RHT";
            bindings = <
&trans      	&trans        	&kp AMPS      	&kp STAR      	&mcr_deg	    &trans        	&trans        	&trans        	&kp UP       	&trans        	&trans        	&win_snip       
&trans       	&trans        	&kp DLLR      	&kp PRCNT     	&kp CARET       &trans        	&trans        	&kp LEFT       	&kp DOWN      	&kp RIGHT      	&trans          &trans        
&trans        	&trans        	&kp EXCL      	&kp AT        	&kp HASH        &trans        	&trans        	&trans        	&kp LPAR      	&kp RPAR      	&kp BSLH      	&trans    
&trans        	&trans        	&trans        	&trans        	&trans          &trans         	&trans        	&trans         	&trans      	&kp C_MUTE    	&kp C_VOL_DN  	&kp C_VOL_UP     
            >;
        };

    };
};